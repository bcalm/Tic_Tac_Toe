{"version":3,"sources":["Component/Square.js","Component/Board.js","Component/Game.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","props","className","onClick","value","Board","i","this","squares","handleClick","Fragment","status","renderSquare","Component","Game","state","slice","isWinner","totalMoves","currentPlayer","setState","nextPlayer","Array","fill","players","document","title","nextPlayerIndex","Math","abs","indexOf","winner","lines","length","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAUeA,UAAMC,MAPrB,SAAgBC,GACd,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,UCuBEC,G,iLAxBAC,GAAI,IAAD,OACd,OAAO,kBAAC,EAAD,CAAQF,MAAOG,KAAKN,MAAMO,QAAQF,GAAIH,QAAS,kBAAM,EAAKF,MAAMQ,YAAYH,Q,+BAInF,OACE,kBAAC,IAAMI,SAAP,KACE,gCAAMH,KAAKN,MAAMU,QACjB,yBAAKT,UAAU,SACZK,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,S,GAlBTC,cCDdC,E,kDACJ,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IAmBRQ,YAAc,SAACH,GACb,IAAME,EAAU,EAAKO,MAAMP,QAAQQ,QAC/BC,EAAST,IAAsC,IAA1B,EAAKO,MAAMG,YAG/BV,EAAQF,KACXE,EAAQF,GAAK,EAAKS,MAAMI,cACxB,EAAKC,SAAS,CACZZ,QAASA,EACTW,cAAe,EAAKE,aACpBH,WAAY,EAAKH,MAAMG,WAAa,MA5BxC,EAAKH,MAAQ,CACXP,QAASc,MAAM,GAAGC,KAAK,MACvBJ,cAAe,IACfK,QAAS,CAAC,IAAK,KACfN,WAAY,GANG,E,gEAWjBO,SAASC,MAAQ,gB,mCAGL,IAAD,EACsBnB,KAAKQ,MAA/BI,EADI,EACJA,cAAeK,EADX,EACWA,QAChBG,EAAkBC,KAAKC,IAAIL,EAAQM,QAAQX,GAAiB,GAClE,OAAOK,EAAQG,K,+BAmBf,IACIhB,EADEoB,EAASd,EAASV,KAAKQ,MAAMP,SASnC,OANEG,EAD4B,IAA1BJ,KAAKQ,MAAMG,WACJ,YACAa,EACA,WAAaA,EAEb,mBAAqBxB,KAAKQ,MAAMI,cAGzC,kBAAC,IAAMT,SAAP,KACE,kBAAC,EAAD,CAAOC,OAAQA,EAAQF,YAAaF,KAAKE,YAAaD,QAASD,KAAKQ,MAAMP,e,GAhD/DK,aAsDbI,EAAW,SAAUT,GAWzB,IAVA,IAAMwB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA1B,EAAI,EAAGA,EAAI0B,EAAMC,OAAQ3B,IAAK,CAAC,IAAD,cACnB0B,EAAM1B,GADa,GAC9B4B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI5B,EAAQ0B,IAAM1B,EAAQ0B,KAAO1B,EAAQ2B,IAAM3B,EAAQ0B,KAAO1B,EAAQ4B,GACpE,OAAO5B,EAAQ0B,GAGnB,OAAO,MAGMpB,IC/DAuB,G,6KARX,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,W,GAJUW,cCQEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpB,SAASqB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ef3f03d.chunk.js","sourcesContent":["import React from 'react';\nimport '../ComponentCss/Square.css';\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\nexport default React.memo(Square);\n","import React, {Component} from 'react';\nimport Square from './Square';\nimport '../ComponentCss/Board.css';\n\nclass Board extends Component {\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.handleClick(i)} />;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h2> {this.props.status}</h2>\n        <div className=\"board\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Board;\n","import React, {Component} from 'react';\nimport Board from './Board';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      currentPlayer: 'X',\n      players: ['X', 'O'],\n      totalMoves: 0,\n    };\n  }\n\n  componentDidMount() {\n    document.title = 'Tic Tac Toe';\n  }\n\n  nextPlayer() {\n    const {currentPlayer, players} = this.state;\n    const nextPlayerIndex = Math.abs(players.indexOf(currentPlayer) - 1);\n    return players[nextPlayerIndex];\n  }\n\n  handleClick = (i) => {\n    const squares = this.state.squares.slice();\n    if (isWinner(squares) || this.state.totalMoves === 9) {\n      return;\n    }\n    if (!squares[i]) {\n      squares[i] = this.state.currentPlayer;\n      this.setState({\n        squares: squares,\n        currentPlayer: this.nextPlayer(),\n        totalMoves: this.state.totalMoves + 1,\n      });\n    }\n  };\n\n  render() {\n    const winner = isWinner(this.state.squares);\n    let status;\n    if (this.state.totalMoves === 9) {\n      status = 'Game Draw';\n    } else if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Current player: ' + this.state.currentPlayer;\n    }\n    return (\n      <React.Fragment>\n        <Board status={status} handleClick={this.handleClick} squares={this.state.squares} />\n      </React.Fragment>\n    );\n  }\n}\n\nconst isWinner = function (squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\n\nexport default Game;\n","import React, {Component} from 'react';\nimport Game from './Component/Game';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}